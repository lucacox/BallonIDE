/// <reference path="../../../ts/jquery.d.ts" />

module engine {
    export class CodeSnippet {
        _type: string;      // fn, class, var
        _file: string;
        _line: number;
        _lines: number;
        _name: string;
        _arguments: any;

        constructor(name, type, file, line, lines) {
            this._name = name;
            this._type = type;
            this._file = file;
            this._line = line;
            this._lines = 1;
            if (lines != undefined) {
                this._lines = lines;
            }
        }

        name(): string {
            return this._name;
        }

        type(): string {
            return this._type
        }

        file(): string {
            return this._file;
        }

        line(): number {
            return this._line;
        }

        lines(): number {
            return this._lines;
        }

        arguments(): any {
            return this._arguments
        }

        setArguments(args: any): void {
            this._arguments = args;
        }
    };

    export interface Parser {
        name: string;
        extensions: string[];
        parse(file: string): CodeSnippet[];
        parseBody(text: string, filename: string): CodeSnippet[];
    };

    export class CodeEngine {
        _snippets: CodeSnippet[];
        _parsers: Parser[];
        _files: string[];

        constructor() {
            this._snippets = [];
            this._parsers = [];
            this._files = [];
        }

        addParser(parser) {
            this._parsers.push(parser);
        }

        find(name: string): CodeSnippet[] {
            var snippets = [];
            for (var i = 0; i < this._snippets.length; ++i) {
                if (this._snippets[i].name() == name) {
                    snippets.push(this._snippets[i]);
                }
            }
            return snippets;
        }

        enqueue(filename: string): void {
            if (this._files.indexOf(filename) == -1) {
                this._files.push(filename);
            }
            if (this._files.length == 1)
                this.addFile(filename);
        }

        addFile(filename: string, parserName?: string): void {
            var me = this;
            $.ajax({
                url: '/api/v1/file',
                type: 'GET',
                data: {
                    filename: filename
                },
            })
                .done(function (data) {
                    if (data.status) {
                        var p = esprima.parse(data.body, { loc: true });

                        for (var i in p.body) {
                            var block = p.body[i];
                            console.log(block);
                            var type = block.type;
                            if (type == "FunctionDeclaration") {
                                var name = block.id.name;
                                var line = block.loc.start.line;
                                var lines = block.loc.end.line - line;
                                var arg = {
                                    arguments: [

                                    ]
                                };
                                for (var j in block.params) {
                                    arg.arguments.push(block.params[j].name)
                            }
                                var cs = new CodeSnippet(name, "fn", filename, line, lines);
                                cs.setArguments(arg);
                                me._snippets.push(cs);
                            }

                            if (type == "VariableDeclaration") {
                                for (var j in block.declarations) {
                                    var name = block.declarations[j].id.name;
                                    var line = block.declarations[j].id.loc.start.line;
                                    me._snippets.push(new CodeSnippet(name, "var", filename, line, 1));
                                }
                            }

                            if (type == "ExpressionStatement") {
                                var expr = block.expression
                            }

                        }
                    }
                });
        }
    }
}

